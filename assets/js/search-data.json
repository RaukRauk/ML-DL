{
  
    
        "post0": {
            "title": "Title",
            "content": ". from google.colab import drive drive.mount(&#39;/content/drive&#39;) . Mounted at /content/drive . !cp -r /content/drive/MyDrive/archive /content/archive . !cp -r /content/drive/MyDrive/archive2 /content/archive2 . !cp -r /content/drive/MyDrive/weights.pt /content . import torch import numpy as np import cv2 model = torch.load(&quot;/content/weights.pt&quot;) model.eval() . DeepLabV3( (backbone): IntermediateLayerGetter( (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False) (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False) (layer1): Sequential( (0): Bottleneck( (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) (downsample): Sequential( (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ) ) (1): Bottleneck( (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) (2): Bottleneck( (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) ) (layer2): Sequential( (0): Bottleneck( (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False) (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) (downsample): Sequential( (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False) (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ) ) (1): Bottleneck( (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) (2): Bottleneck( (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) (3): Bottleneck( (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) ) (layer3): Sequential( (0): Bottleneck( (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) (downsample): Sequential( (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False) (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ) ) (1): Bottleneck( (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) (2): Bottleneck( (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) (3): Bottleneck( (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) (4): Bottleneck( (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) (5): Bottleneck( (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) (6): Bottleneck( (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) (7): Bottleneck( (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) (8): Bottleneck( (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) (9): Bottleneck( (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) (10): Bottleneck( (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) (11): Bottleneck( (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) (12): Bottleneck( (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) (13): Bottleneck( (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) (14): Bottleneck( (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) (15): Bottleneck( (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) (16): Bottleneck( (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) (17): Bottleneck( (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) (18): Bottleneck( (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) (19): Bottleneck( (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) (20): Bottleneck( (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) (21): Bottleneck( (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) (22): Bottleneck( (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) ) (layer4): Sequential( (0): Bottleneck( (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False) (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) (downsample): Sequential( (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False) (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ) ) (1): Bottleneck( (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False) (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) (2): Bottleneck( (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False) (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) ) ) (classifier): DeepLabHead( (0): ASPP( (convs): ModuleList( (0): Sequential( (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (2): ReLU() ) (1): ASPPConv( (0): Conv2d(2048, 256, kernel_size=(3, 3), stride=(1, 1), padding=(12, 12), dilation=(12, 12), bias=False) (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (2): ReLU() ) (2): ASPPConv( (0): Conv2d(2048, 256, kernel_size=(3, 3), stride=(1, 1), padding=(24, 24), dilation=(24, 24), bias=False) (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (2): ReLU() ) (3): ASPPConv( (0): Conv2d(2048, 256, kernel_size=(3, 3), stride=(1, 1), padding=(36, 36), dilation=(36, 36), bias=False) (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (2): ReLU() ) (4): ASPPPooling( (0): AdaptiveAvgPool2d(output_size=1) (1): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (3): ReLU() ) ) (project): Sequential( (0): Conv2d(1280, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (2): ReLU() (3): Dropout(p=0.5, inplace=False) ) ) (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (3): ReLU() (4): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1)) ) (aux_classifier): FCNHead( (0): Conv2d(1024, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (2): ReLU() (3): Dropout(p=0.1, inplace=False) (4): Conv2d(256, 21, kernel_size=(1, 1), stride=(1, 1)) ) ) . import cv2 import matplotlib.pyplot as plt filename = &#39;/content/archive/images/pexels-極逵勻筠剋-_棘_棘克龜戟-2324837.jpg&#39; img1 = cv2.imread(filename) img2 = cv2.imread(&#39;/content/archive/masks/pexels-極逵勻筠剋-_棘_棘克龜戟-2324837.png&#39;) img1_rgb = cv2.cvtColor(img1, cv2.COLOR_BGR2RGB) img2_rgb = cv2.cvtColor(img2, cv2.COLOR_BGR2RGB) plt.figure(figsize=(15, 15)) ax1 = plt.subplot(1, 3, 1) ax1.imshow(img1_rgb) plt.xlabel(&quot;INPUT&quot;, size = 15) ax2 = plt.subplot(1, 3, 2) ax2.imshow(img2_rgb) plt.xlabel(&quot;LABEL&quot;, size = 15) # Deeplab V3 Prediction # sample execution (requires torchvision) from PIL import Image from torchvision import transforms input_image = Image.open(filename) print(input_image) preprocess = transforms.Compose([ transforms.ToTensor() ]) input_tensor = preprocess(input_image) input_batch = input_tensor.unsqueeze(0) # create a mini-batch as expected by the model # move the input and model to GPU for speed if available if torch.cuda.is_available(): print(&#39;Using GPU!&#39;) input_batch = input_batch.to(&#39;cuda&#39;) model.to(&#39;cuda&#39;) with torch.no_grad(): output = model(input_batch)[&#39;out&#39;][0] output_predictions = output[0] # plot the semantic segmentation predictions of 21 classes in each color img_size = input_image.size data = output_predictions.cpu().numpy() * 256 print(data) print(data.sum()) r = Image.fromarray(data).resize(img_size) ax3 = plt.subplot(1, 3, 3) ax3 = plt.imshow(r) plt.xlabel(&quot;OUTPUT&quot;, size = 15) plt.show() . &lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=1920x1280 at 0x7FA5523422D0&gt; Using GPU! [[ 5.45466 5.45466 5.45466 ... -1.9461594 -1.9461594 -1.9461594] [ 5.45466 5.45466 5.45466 ... -1.9461594 -1.9461594 -1.9461594] [ 5.45466 5.45466 5.45466 ... -1.9461594 -1.9461594 -1.9461594] ... [ 2.2296925 2.2296925 2.2296925 ... 1.4804513 1.4804513 1.4804513] [ 2.2296925 2.2296925 2.2296925 ... 1.4804513 1.4804513 1.4804513] [ 2.2296925 2.2296925 2.2296925 ... 1.4804513 1.4804513 1.4804513]] 42617024.0 . import cv2 import matplotlib.pyplot as plt filename = &#39;/content/archive/images/pexels-charlotte-may-5965620.jpg&#39; img1 = cv2.imread(filename) img2 = cv2.imread(&#39;/content/archive/masks/pexels-charlotte-may-5965620.png&#39;) img1_rgb = cv2.cvtColor(img1, cv2.COLOR_BGR2RGB) img2_rgb = cv2.cvtColor(img2, cv2.COLOR_BGR2RGB) plt.figure(figsize=(15, 15)) ax1 = plt.subplot(1, 3, 1) ax1.imshow(img1_rgb) plt.xlabel(&quot;INPUT&quot;, size = 15) ax2 = plt.subplot(1, 3, 2) ax2.imshow(img2_rgb) plt.xlabel(&quot;LABEL&quot;, size = 15) # Deeplab V3 Prediction # sample execution (requires torchvision) from PIL import Image from torchvision import transforms input_image = Image.open(filename) print(input_image) preprocess = transforms.Compose([ transforms.ToTensor() ]) input_tensor = preprocess(input_image) input_batch = input_tensor.unsqueeze(0) # create a mini-batch as expected by the model # move the input and model to GPU for speed if available if torch.cuda.is_available(): print(&#39;Using GPU!&#39;) input_batch = input_batch.to(&#39;cuda&#39;) model.to(&#39;cuda&#39;) with torch.no_grad(): output = model(input_batch)[&#39;out&#39;][0] output_predictions = output[0] # plot the semantic segmentation predictions of 21 classes in each color img_size = input_image.size data = output_predictions.cpu().numpy() * 255 print(data) print(data.sum()) r = Image.fromarray(data).resize(img_size) ax3 = plt.subplot(1, 3, 3) ax3 = plt.imshow(r) plt.xlabel(&quot;OUTPUT&quot;, size = 15) plt.show() . &lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=1920x1280 at 0x7FA5503DC110&gt; Using GPU! [[3.091479 3.091479 3.091479 ... 0.7202423 0.7202423 0.7202423] [3.091479 3.091479 3.091479 ... 0.7202423 0.7202423 0.7202423] [3.091479 3.091479 3.091479 ... 0.7202423 0.7202423 0.7202423] ... [3.7924721 3.7924721 3.7924721 ... 1.4470047 1.4470047 1.4470047] [3.7924721 3.7924721 3.7924721 ... 1.4470047 1.4470047 1.4470047] [3.7924721 3.7924721 3.7924721 ... 1.4470047 1.4470047 1.4470047]] 9521460.0 . import cv2 import matplotlib.pyplot as plt filename = &#39;/content/archive/images/pexels-jessica-ticozzelli-5670180.jpg&#39; img1 = cv2.imread(filename) img2 = cv2.imread(&#39;/content/archive/masks/pexels-jessica-ticozzelli-5670180.png&#39;) img1_rgb = cv2.cvtColor(img1, cv2.COLOR_BGR2RGB) img2_rgb = cv2.cvtColor(img2, cv2.COLOR_BGR2RGB) plt.figure(figsize=(15, 15)) ax1 = plt.subplot(1, 3, 1) ax1.imshow(img1_rgb) plt.xlabel(&quot;INPUT&quot;, size = 15) ax2 = plt.subplot(1, 3, 2) ax2.imshow(img2_rgb) plt.xlabel(&quot;LABEL&quot;, size = 15) # Deeplab V3 Prediction # sample execution (requires torchvision) from PIL import Image from torchvision import transforms input_image = Image.open(filename) print(input_image) preprocess = transforms.Compose([ transforms.ToTensor() ]) input_tensor = preprocess(input_image) input_batch = input_tensor.unsqueeze(0) # create a mini-batch as expected by the model # move the input and model to GPU for speed if available if torch.cuda.is_available(): print(&#39;Using GPU!&#39;) input_batch = input_batch.to(&#39;cuda&#39;) model.to(&#39;cuda&#39;) with torch.no_grad(): output = model(input_batch)[&#39;out&#39;][0] output_predictions = output[0] # plot the semantic segmentation predictions of 21 classes in each color img_size = input_image.size data = output_predictions.cpu().numpy() * 255 print(data) print(data.sum()) r = Image.fromarray(data).resize(img_size) ax3 = plt.subplot(1, 3, 3) ax3 = plt.imshow(r) plt.xlabel(&quot;OUTPUT&quot;, size = 15) plt.show() . &lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=1920x1280 at 0x7FA53F649190&gt; Using GPU! [[4.573134 4.573134 4.573134 ... 1.3538351 1.3538351 1.3538351] [4.573134 4.573134 4.573134 ... 1.3538351 1.3538351 1.3538351] [4.573134 4.573134 4.573134 ... 1.3538351 1.3538351 1.3538351] ... [2.974099 2.974099 2.974099 ... 3.053765 3.053765 3.053765 ] [2.974099 2.974099 2.974099 ... 3.053765 3.053765 3.053765 ] [2.974099 2.974099 2.974099 ... 3.053765 3.053765 3.053765 ]] 16178913.0 . import cv2 import matplotlib.pyplot as plt filename = &#39;/content/ferry-g58ee77489_1920.jpg&#39; img1 = cv2.imread(filename) img1_rgb = cv2.cvtColor(img1, cv2.COLOR_BGR2RGB) plt.figure(figsize=(15, 15)) ax1 = plt.subplot(1, 2, 1) ax1.imshow(img1_rgb) plt.xlabel(&quot;INPUT&quot;, size = 15) # Deeplab V3 Prediction # sample execution (requires torchvision) from PIL import Image from torchvision import transforms input_image = Image.open(filename) print(input_image) preprocess = transforms.Compose([ transforms.ToTensor() ]) input_tensor = preprocess(input_image) input_batch = input_tensor.unsqueeze(0) # create a mini-batch as expected by the model # move the input and model to GPU for speed if available if torch.cuda.is_available(): print(&#39;Using GPU!&#39;) input_batch = input_batch.to(&#39;cuda&#39;) model.to(&#39;cuda&#39;) with torch.no_grad(): output = model(input_batch)[&#39;out&#39;][0] output_predictions = output[0] # plot the semantic segmentation predictions of 21 classes in each color img_size = input_image.size data = output_predictions.cpu().numpy() * 255 print(data) print(data.sum()) r = Image.fromarray(data).resize(img_size) ax3 = plt.subplot(1, 2, 2) ax3 = plt.imshow(r) plt.xlabel(&quot;OUTPUT&quot;, size = 15) plt.show() . &lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=1920x1191 at 0x7FA5502A8ED0&gt; Using GPU! [[4.7705436 4.7705436 4.7705436 ... 2.14626 2.14626 2.14626 ] [4.7705436 4.7705436 4.7705436 ... 2.14626 2.14626 2.14626 ] [4.7705436 4.7705436 4.7705436 ... 2.14626 2.14626 2.14626 ] ... [3.1820395 3.1820395 3.1820395 ... 3.0601 3.0601 3.0601 ] [3.1820395 3.1820395 3.1820395 ... 3.0601 3.0601 3.0601 ] [3.1820395 3.1820395 3.1820395 ... 3.0601 3.0601 3.0601 ]] 2829507.2 . import cv2 import matplotlib.pyplot as plt filename = &#39;/content/people-wearing-face-mask-for-protection-3957986-scaled.jpg&#39; img1 = cv2.imread(filename) img1_rgb = cv2.cvtColor(img1, cv2.COLOR_BGR2RGB) plt.figure(figsize=(15, 15)) ax1 = plt.subplot(1, 2, 1) ax1.imshow(img1_rgb) plt.xlabel(&quot;INPUT&quot;, size = 15) # Deeplab V3 Prediction # sample execution (requires torchvision) from PIL import Image from torchvision import transforms input_image = Image.open(filename) print(input_image) preprocess = transforms.Compose([ transforms.ToTensor() ]) input_tensor = preprocess(input_image) input_batch = input_tensor.unsqueeze(0) # create a mini-batch as expected by the model # move the input and model to GPU for speed if available if torch.cuda.is_available(): print(&#39;Using GPU!&#39;) input_batch = input_batch.to(&#39;cuda&#39;) model.to(&#39;cuda&#39;) with torch.no_grad(): output = model(input_batch)[&#39;out&#39;][0] output_predictions = output[0] # plot the semantic segmentation predictions of 21 classes in each color img_size = input_image.size data = output_predictions.cpu().numpy() * 255 print(data) print(data.sum()) r = Image.fromarray(data).resize(img_size) ax3 = plt.subplot(1, 2, 2) ax3 = plt.imshow(r) plt.xlabel(&quot;OUTPUT&quot;, size = 15) plt.show() . &lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=2560x1714 at 0x7FA550209790&gt; Using GPU! [[ 5.050884 5.050884 5.050884 ... 1.0496678 1.0496678 1.0496678 ] [ 5.050884 5.050884 5.050884 ... 1.0496678 1.0496678 1.0496678 ] [ 5.050884 5.050884 5.050884 ... 1.0496678 1.0496678 1.0496678 ] ... [ 2.374113 2.374113 2.374113 ... -0.24998383 -0.24998383 -0.24998383] [ 2.374113 2.374113 2.374113 ... -0.24998383 -0.24998383 -0.24998383] [ 2.374113 2.374113 2.374113 ... -0.24998383 -0.24998383 -0.24998383]] 113737416.0 . import cv2 import matplotlib.pyplot as plt filename = &#39;/content/KakaoTalk_20211223_201004782.jpg&#39; img1 = cv2.imread(filename) img1_rgb = cv2.cvtColor(img1, cv2.COLOR_BGR2RGB) plt.figure(figsize=(20, 20)) ax1 = plt.subplot(1, 2, 1) ax1.imshow(img1_rgb) plt.xlabel(&quot;INPUT&quot;, size = 15) # Deeplab V3 Prediction # sample execution (requires torchvision) from PIL import Image from torchvision import transforms input_image = Image.open(filename) print(input_image) preprocess = transforms.Compose([ transforms.ToTensor() ]) input_tensor = preprocess(input_image) input_batch = input_tensor.unsqueeze(0) # create a mini-batch as expected by the model # move the input and model to GPU for speed if available if torch.cuda.is_available(): print(&#39;Using GPU!&#39;) input_batch = input_batch.to(&#39;cuda&#39;) model.to(&#39;cuda&#39;) with torch.no_grad(): output = model(input_batch)[&#39;out&#39;][0] output_predictions = output[0] # plot the semantic segmentation predictions of 21 classes in each color img_size = input_image.size data = output_predictions.cpu().numpy() * 255 print(data) print(data.sum()) r = Image.fromarray(data).resize(img_size) ax3 = plt.subplot(1, 2, 2) ax3 = plt.imshow(r) plt.xlabel(&quot;OUTPUT&quot;, size = 15) plt.show() . &lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=960x1280 at 0x7FA53F550210&gt; Using GPU! [[5.0268693 5.0268693 5.0268693 ... 2.353081 2.353081 2.353081 ] [5.0268693 5.0268693 5.0268693 ... 2.353081 2.353081 2.353081 ] [5.0268693 5.0268693 5.0268693 ... 2.353081 2.353081 2.353081 ] ... [1.0000278 1.0000278 1.0000278 ... 2.217442 2.217442 2.217442 ] [1.0000278 1.0000278 1.0000278 ... 2.217442 2.217442 2.217442 ] [1.0000278 1.0000278 1.0000278 ... 2.217442 2.217442 2.217442 ]] 1311989.6 . import cv2 import matplotlib.pyplot as plt filename = &#39;/content/캡처22.JPG&#39; img1 = cv2.imread(filename) img1_rgb = cv2.cvtColor(img1, cv2.COLOR_BGR2RGB) plt.figure(figsize=(25, 25)) ax1 = plt.subplot(1, 2, 1) ax1.imshow(img1_rgb) plt.xlabel(&quot;INPUT&quot;, size = 15) # Deeplab V3 Prediction # sample execution (requires torchvision) from PIL import Image from torchvision import transforms input_image = Image.open(filename) print(input_image) preprocess = transforms.Compose([ transforms.ToTensor() ]) input_tensor = preprocess(input_image) input_batch = input_tensor.unsqueeze(0) # create a mini-batch as expected by the model # move the input and model to GPU for speed if available if torch.cuda.is_available(): print(&#39;Using GPU!&#39;) input_batch = input_batch.to(&#39;cuda&#39;) model.to(&#39;cuda&#39;) with torch.no_grad(): output = model(input_batch)[&#39;out&#39;][0] output_predictions = output[0] # plot the semantic segmentation predictions of 21 classes in each color img_size = input_image.size data = output_predictions.cpu().numpy() * 255 print(data) print(data.sum()) r = Image.fromarray(data).resize(img_size) ax3 = plt.subplot(1, 2, 2) ax3 = plt.imshow(r) plt.xlabel(&quot;OUTPUT&quot;, size = 15) plt.show() . &lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=1366x768 at 0x7F9704831310&gt; Using GPU! [[6.118342 6.118342 6.118342 ... 1.5639745 1.5639745 1.5639745] [6.118342 6.118342 6.118342 ... 1.5639745 1.5639745 1.5639745] [6.118342 6.118342 6.118342 ... 1.5639745 1.5639745 1.5639745] ... [3.5671527 3.5671527 3.5671527 ... 3.0905356 3.0905356 3.0905356] [3.5671527 3.5671527 3.5671527 ... 3.0905356 3.0905356 3.0905356] [3.5671527 3.5671527 3.5671527 ... 3.0905356 3.0905356 3.0905356]] 4007741.8 . import cv2 import matplotlib.pyplot as plt filename = &#39;/content/캡처33.JPG&#39; img1 = cv2.imread(filename) img1_rgb = cv2.cvtColor(img1, cv2.COLOR_BGR2RGB) plt.figure(figsize=(25, 25)) ax1 = plt.subplot(1, 2, 1) ax1.imshow(img1_rgb) plt.xlabel(&quot;INPUT&quot;, size = 15) # Deeplab V3 Prediction # sample execution (requires torchvision) from PIL import Image from torchvision import transforms input_image = Image.open(filename) print(input_image) preprocess = transforms.Compose([ transforms.ToTensor() ]) input_tensor = preprocess(input_image) input_batch = input_tensor.unsqueeze(0) # create a mini-batch as expected by the model # move the input and model to GPU for speed if available if torch.cuda.is_available(): print(&#39;Using GPU!&#39;) input_batch = input_batch.to(&#39;cuda&#39;) model.to(&#39;cuda&#39;) with torch.no_grad(): output = model(input_batch)[&#39;out&#39;][0] output_predictions = output[0] # plot the semantic segmentation predictions of 21 classes in each color img_size = input_image.size data = output_predictions.cpu().numpy() * 255 print(data) print(data.sum()) r = Image.fromarray(data).resize(img_size) ax3 = plt.subplot(1, 2, 2) ax3 = plt.imshow(r) plt.xlabel(&quot;OUTPUT&quot;, size = 15) plt.show() . &lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=1366x768 at 0x7F9704A372D0&gt; Using GPU! [[3.808771 3.808771 3.808771 ... 1.001113 1.001113 1.001113 ] [3.808771 3.808771 3.808771 ... 1.001113 1.001113 1.001113 ] [3.808771 3.808771 3.808771 ... 1.001113 1.001113 1.001113 ] ... [1.78548 1.78548 1.78548 ... 1.3692136 1.3692136 1.3692136] [1.78548 1.78548 1.78548 ... 1.3692136 1.3692136 1.3692136] [1.78548 1.78548 1.78548 ... 1.3692136 1.3692136 1.3692136]] 176825.69 .",
            "url": "https://raukrauk.github.io/ML-DL/2021/12/24/_12_24_Deeplab_V3_prediction.html",
            "relUrl": "/2021/12/24/_12_24_Deeplab_V3_prediction.html",
            "date": " • Dec 24, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Title",
            "content": "from google.colab import drive drive.mount(&#39;/content/drive&#39;) . Mounted at /content/drive . !cp -r /content/drive/MyDrive/archive /content/archive . !cp -r /content/drive/MyDrive/archive2 /content/archive2 . !cp -r /content/drive/MyDrive/weights.pt /content . import torch import numpy as np import cv2 model = torch.load(&quot;/content/weights.pt&quot;) model.eval() . DeepLabV3( (backbone): IntermediateLayerGetter( (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False) (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False) (layer1): Sequential( (0): Bottleneck( (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) (downsample): Sequential( (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ) ) (1): Bottleneck( (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) (2): Bottleneck( (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) ) (layer2): Sequential( (0): Bottleneck( (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False) (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) (downsample): Sequential( (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False) (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ) ) (1): Bottleneck( (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) (2): Bottleneck( (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) (3): Bottleneck( (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) ) (layer3): Sequential( (0): Bottleneck( (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) (downsample): Sequential( (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False) (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ) ) (1): Bottleneck( (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) (2): Bottleneck( (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) (3): Bottleneck( (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) (4): Bottleneck( (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) (5): Bottleneck( (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) (6): Bottleneck( (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) (7): Bottleneck( (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) (8): Bottleneck( (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) (9): Bottleneck( (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) (10): Bottleneck( (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) (11): Bottleneck( (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) (12): Bottleneck( (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) (13): Bottleneck( (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) (14): Bottleneck( (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) (15): Bottleneck( (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) (16): Bottleneck( (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) (17): Bottleneck( (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) (18): Bottleneck( (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) (19): Bottleneck( (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) (20): Bottleneck( (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) (21): Bottleneck( (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) (22): Bottleneck( (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) ) (layer4): Sequential( (0): Bottleneck( (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False) (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) (downsample): Sequential( (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False) (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ) ) (1): Bottleneck( (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False) (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) (2): Bottleneck( (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False) (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False) (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) ) ) ) (classifier): DeepLabHead( (0): ASPP( (convs): ModuleList( (0): Sequential( (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (2): ReLU() ) (1): ASPPConv( (0): Conv2d(2048, 256, kernel_size=(3, 3), stride=(1, 1), padding=(12, 12), dilation=(12, 12), bias=False) (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (2): ReLU() ) (2): ASPPConv( (0): Conv2d(2048, 256, kernel_size=(3, 3), stride=(1, 1), padding=(24, 24), dilation=(24, 24), bias=False) (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (2): ReLU() ) (3): ASPPConv( (0): Conv2d(2048, 256, kernel_size=(3, 3), stride=(1, 1), padding=(36, 36), dilation=(36, 36), bias=False) (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (2): ReLU() ) (4): ASPPPooling( (0): AdaptiveAvgPool2d(output_size=1) (1): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (3): ReLU() ) ) (project): Sequential( (0): Conv2d(1280, 256, kernel_size=(1, 1), stride=(1, 1), bias=False) (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (2): ReLU() (3): Dropout(p=0.5, inplace=False) ) ) (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (3): ReLU() (4): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1)) ) (aux_classifier): FCNHead( (0): Conv2d(1024, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (2): ReLU() (3): Dropout(p=0.1, inplace=False) (4): Conv2d(256, 21, kernel_size=(1, 1), stride=(1, 1)) ) ) . import cv2 import matplotlib.pyplot as plt filename = &#39;/content/archive/images/pexels-極逵勻筠剋-_棘_棘克龜戟-2324837.jpg&#39; img1 = cv2.imread(filename) img2 = cv2.imread(&#39;/content/archive/masks/pexels-極逵勻筠剋-_棘_棘克龜戟-2324837.png&#39;) img1_rgb = cv2.cvtColor(img1, cv2.COLOR_BGR2RGB) img2_rgb = cv2.cvtColor(img2, cv2.COLOR_BGR2RGB) plt.figure(figsize=(15, 15)) ax1 = plt.subplot(1, 3, 1) ax1.imshow(img1_rgb) plt.xlabel(&quot;INPUT&quot;, size = 15) ax2 = plt.subplot(1, 3, 2) ax2.imshow(img2_rgb) plt.xlabel(&quot;LABEL&quot;, size = 15) # Deeplab V3 Prediction # sample execution (requires torchvision) from PIL import Image from torchvision import transforms input_image = Image.open(filename) print(input_image) preprocess = transforms.Compose([ transforms.ToTensor() ]) input_tensor = preprocess(input_image) input_batch = input_tensor.unsqueeze(0) # create a mini-batch as expected by the model # move the input and model to GPU for speed if available if torch.cuda.is_available(): print(&#39;Using GPU!&#39;) input_batch = input_batch.to(&#39;cuda&#39;) model.to(&#39;cuda&#39;) with torch.no_grad(): output = model(input_batch)[&#39;out&#39;][0] output_predictions = output[0] # plot the semantic segmentation predictions of 21 classes in each color img_size = input_image.size data = output_predictions.cpu().numpy() * 256 print(data) print(data.sum()) r = Image.fromarray(data).resize(img_size) ax3 = plt.subplot(1, 3, 3) ax3 = plt.imshow(r) plt.xlabel(&quot;OUTPUT&quot;, size = 15) plt.show() . &lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=1920x1280 at 0x7FA5523422D0&gt; Using GPU! [[ 5.45466 5.45466 5.45466 ... -1.9461594 -1.9461594 -1.9461594] [ 5.45466 5.45466 5.45466 ... -1.9461594 -1.9461594 -1.9461594] [ 5.45466 5.45466 5.45466 ... -1.9461594 -1.9461594 -1.9461594] ... [ 2.2296925 2.2296925 2.2296925 ... 1.4804513 1.4804513 1.4804513] [ 2.2296925 2.2296925 2.2296925 ... 1.4804513 1.4804513 1.4804513] [ 2.2296925 2.2296925 2.2296925 ... 1.4804513 1.4804513 1.4804513]] 42617024.0 . import cv2 import matplotlib.pyplot as plt filename = &#39;/content/archive/images/pexels-charlotte-may-5965620.jpg&#39; img1 = cv2.imread(filename) img2 = cv2.imread(&#39;/content/archive/masks/pexels-charlotte-may-5965620.png&#39;) img1_rgb = cv2.cvtColor(img1, cv2.COLOR_BGR2RGB) img2_rgb = cv2.cvtColor(img2, cv2.COLOR_BGR2RGB) plt.figure(figsize=(15, 15)) ax1 = plt.subplot(1, 3, 1) ax1.imshow(img1_rgb) plt.xlabel(&quot;INPUT&quot;, size = 15) ax2 = plt.subplot(1, 3, 2) ax2.imshow(img2_rgb) plt.xlabel(&quot;LABEL&quot;, size = 15) # Deeplab V3 Prediction # sample execution (requires torchvision) from PIL import Image from torchvision import transforms input_image = Image.open(filename) print(input_image) preprocess = transforms.Compose([ transforms.ToTensor() ]) input_tensor = preprocess(input_image) input_batch = input_tensor.unsqueeze(0) # create a mini-batch as expected by the model # move the input and model to GPU for speed if available if torch.cuda.is_available(): print(&#39;Using GPU!&#39;) input_batch = input_batch.to(&#39;cuda&#39;) model.to(&#39;cuda&#39;) with torch.no_grad(): output = model(input_batch)[&#39;out&#39;][0] output_predictions = output[0] # plot the semantic segmentation predictions of 21 classes in each color img_size = input_image.size data = output_predictions.cpu().numpy() * 255 print(data) print(data.sum()) r = Image.fromarray(data).resize(img_size) ax3 = plt.subplot(1, 3, 3) ax3 = plt.imshow(r) plt.xlabel(&quot;OUTPUT&quot;, size = 15) plt.show() . &lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=1920x1280 at 0x7FA5503DC110&gt; Using GPU! [[3.091479 3.091479 3.091479 ... 0.7202423 0.7202423 0.7202423] [3.091479 3.091479 3.091479 ... 0.7202423 0.7202423 0.7202423] [3.091479 3.091479 3.091479 ... 0.7202423 0.7202423 0.7202423] ... [3.7924721 3.7924721 3.7924721 ... 1.4470047 1.4470047 1.4470047] [3.7924721 3.7924721 3.7924721 ... 1.4470047 1.4470047 1.4470047] [3.7924721 3.7924721 3.7924721 ... 1.4470047 1.4470047 1.4470047]] 9521460.0 . import cv2 import matplotlib.pyplot as plt filename = &#39;/content/archive/images/pexels-jessica-ticozzelli-5670180.jpg&#39; img1 = cv2.imread(filename) img2 = cv2.imread(&#39;/content/archive/masks/pexels-jessica-ticozzelli-5670180.png&#39;) img1_rgb = cv2.cvtColor(img1, cv2.COLOR_BGR2RGB) img2_rgb = cv2.cvtColor(img2, cv2.COLOR_BGR2RGB) plt.figure(figsize=(15, 15)) ax1 = plt.subplot(1, 3, 1) ax1.imshow(img1_rgb) plt.xlabel(&quot;INPUT&quot;, size = 15) ax2 = plt.subplot(1, 3, 2) ax2.imshow(img2_rgb) plt.xlabel(&quot;LABEL&quot;, size = 15) # Deeplab V3 Prediction # sample execution (requires torchvision) from PIL import Image from torchvision import transforms input_image = Image.open(filename) print(input_image) preprocess = transforms.Compose([ transforms.ToTensor() ]) input_tensor = preprocess(input_image) input_batch = input_tensor.unsqueeze(0) # create a mini-batch as expected by the model # move the input and model to GPU for speed if available if torch.cuda.is_available(): print(&#39;Using GPU!&#39;) input_batch = input_batch.to(&#39;cuda&#39;) model.to(&#39;cuda&#39;) with torch.no_grad(): output = model(input_batch)[&#39;out&#39;][0] output_predictions = output[0] # plot the semantic segmentation predictions of 21 classes in each color img_size = input_image.size data = output_predictions.cpu().numpy() * 255 print(data) print(data.sum()) r = Image.fromarray(data).resize(img_size) ax3 = plt.subplot(1, 3, 3) ax3 = plt.imshow(r) plt.xlabel(&quot;OUTPUT&quot;, size = 15) plt.show() . &lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=1920x1280 at 0x7FA53F649190&gt; Using GPU! [[4.573134 4.573134 4.573134 ... 1.3538351 1.3538351 1.3538351] [4.573134 4.573134 4.573134 ... 1.3538351 1.3538351 1.3538351] [4.573134 4.573134 4.573134 ... 1.3538351 1.3538351 1.3538351] ... [2.974099 2.974099 2.974099 ... 3.053765 3.053765 3.053765 ] [2.974099 2.974099 2.974099 ... 3.053765 3.053765 3.053765 ] [2.974099 2.974099 2.974099 ... 3.053765 3.053765 3.053765 ]] 16178913.0 . import cv2 import matplotlib.pyplot as plt filename = &#39;/content/ferry-g58ee77489_1920.jpg&#39; img1 = cv2.imread(filename) img1_rgb = cv2.cvtColor(img1, cv2.COLOR_BGR2RGB) plt.figure(figsize=(15, 15)) ax1 = plt.subplot(1, 2, 1) ax1.imshow(img1_rgb) plt.xlabel(&quot;INPUT&quot;, size = 15) # Deeplab V3 Prediction # sample execution (requires torchvision) from PIL import Image from torchvision import transforms input_image = Image.open(filename) print(input_image) preprocess = transforms.Compose([ transforms.ToTensor() ]) input_tensor = preprocess(input_image) input_batch = input_tensor.unsqueeze(0) # create a mini-batch as expected by the model # move the input and model to GPU for speed if available if torch.cuda.is_available(): print(&#39;Using GPU!&#39;) input_batch = input_batch.to(&#39;cuda&#39;) model.to(&#39;cuda&#39;) with torch.no_grad(): output = model(input_batch)[&#39;out&#39;][0] output_predictions = output[0] # plot the semantic segmentation predictions of 21 classes in each color img_size = input_image.size data = output_predictions.cpu().numpy() * 255 print(data) print(data.sum()) r = Image.fromarray(data).resize(img_size) ax3 = plt.subplot(1, 2, 2) ax3 = plt.imshow(r) plt.xlabel(&quot;OUTPUT&quot;, size = 15) plt.show() . &lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=1920x1191 at 0x7FA5502A8ED0&gt; Using GPU! [[4.7705436 4.7705436 4.7705436 ... 2.14626 2.14626 2.14626 ] [4.7705436 4.7705436 4.7705436 ... 2.14626 2.14626 2.14626 ] [4.7705436 4.7705436 4.7705436 ... 2.14626 2.14626 2.14626 ] ... [3.1820395 3.1820395 3.1820395 ... 3.0601 3.0601 3.0601 ] [3.1820395 3.1820395 3.1820395 ... 3.0601 3.0601 3.0601 ] [3.1820395 3.1820395 3.1820395 ... 3.0601 3.0601 3.0601 ]] 2829507.2 . import cv2 import matplotlib.pyplot as plt filename = &#39;/content/people-wearing-face-mask-for-protection-3957986-scaled.jpg&#39; img1 = cv2.imread(filename) img1_rgb = cv2.cvtColor(img1, cv2.COLOR_BGR2RGB) plt.figure(figsize=(15, 15)) ax1 = plt.subplot(1, 2, 1) ax1.imshow(img1_rgb) plt.xlabel(&quot;INPUT&quot;, size = 15) # Deeplab V3 Prediction # sample execution (requires torchvision) from PIL import Image from torchvision import transforms input_image = Image.open(filename) print(input_image) preprocess = transforms.Compose([ transforms.ToTensor() ]) input_tensor = preprocess(input_image) input_batch = input_tensor.unsqueeze(0) # create a mini-batch as expected by the model # move the input and model to GPU for speed if available if torch.cuda.is_available(): print(&#39;Using GPU!&#39;) input_batch = input_batch.to(&#39;cuda&#39;) model.to(&#39;cuda&#39;) with torch.no_grad(): output = model(input_batch)[&#39;out&#39;][0] output_predictions = output[0] # plot the semantic segmentation predictions of 21 classes in each color img_size = input_image.size data = output_predictions.cpu().numpy() * 255 print(data) print(data.sum()) r = Image.fromarray(data).resize(img_size) ax3 = plt.subplot(1, 2, 2) ax3 = plt.imshow(r) plt.xlabel(&quot;OUTPUT&quot;, size = 15) plt.show() . &lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=2560x1714 at 0x7FA550209790&gt; Using GPU! [[ 5.050884 5.050884 5.050884 ... 1.0496678 1.0496678 1.0496678 ] [ 5.050884 5.050884 5.050884 ... 1.0496678 1.0496678 1.0496678 ] [ 5.050884 5.050884 5.050884 ... 1.0496678 1.0496678 1.0496678 ] ... [ 2.374113 2.374113 2.374113 ... -0.24998383 -0.24998383 -0.24998383] [ 2.374113 2.374113 2.374113 ... -0.24998383 -0.24998383 -0.24998383] [ 2.374113 2.374113 2.374113 ... -0.24998383 -0.24998383 -0.24998383]] 113737416.0 . import cv2 import matplotlib.pyplot as plt filename = &#39;/content/KakaoTalk_20211223_201004782.jpg&#39; img1 = cv2.imread(filename) img1_rgb = cv2.cvtColor(img1, cv2.COLOR_BGR2RGB) plt.figure(figsize=(20, 20)) ax1 = plt.subplot(1, 2, 1) ax1.imshow(img1_rgb) plt.xlabel(&quot;INPUT&quot;, size = 15) # Deeplab V3 Prediction # sample execution (requires torchvision) from PIL import Image from torchvision import transforms input_image = Image.open(filename) print(input_image) preprocess = transforms.Compose([ transforms.ToTensor() ]) input_tensor = preprocess(input_image) input_batch = input_tensor.unsqueeze(0) # create a mini-batch as expected by the model # move the input and model to GPU for speed if available if torch.cuda.is_available(): print(&#39;Using GPU!&#39;) input_batch = input_batch.to(&#39;cuda&#39;) model.to(&#39;cuda&#39;) with torch.no_grad(): output = model(input_batch)[&#39;out&#39;][0] output_predictions = output[0] # plot the semantic segmentation predictions of 21 classes in each color img_size = input_image.size data = output_predictions.cpu().numpy() * 255 print(data) print(data.sum()) r = Image.fromarray(data).resize(img_size) ax3 = plt.subplot(1, 2, 2) ax3 = plt.imshow(r) plt.xlabel(&quot;OUTPUT&quot;, size = 15) plt.show() . &lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=960x1280 at 0x7FA53F550210&gt; Using GPU! [[5.0268693 5.0268693 5.0268693 ... 2.353081 2.353081 2.353081 ] [5.0268693 5.0268693 5.0268693 ... 2.353081 2.353081 2.353081 ] [5.0268693 5.0268693 5.0268693 ... 2.353081 2.353081 2.353081 ] ... [1.0000278 1.0000278 1.0000278 ... 2.217442 2.217442 2.217442 ] [1.0000278 1.0000278 1.0000278 ... 2.217442 2.217442 2.217442 ] [1.0000278 1.0000278 1.0000278 ... 2.217442 2.217442 2.217442 ]] 1311989.6 . import cv2 import matplotlib.pyplot as plt filename = &#39;/content/캡처22.JPG&#39; img1 = cv2.imread(filename) img1_rgb = cv2.cvtColor(img1, cv2.COLOR_BGR2RGB) plt.figure(figsize=(25, 25)) ax1 = plt.subplot(1, 2, 1) ax1.imshow(img1_rgb) plt.xlabel(&quot;INPUT&quot;, size = 15) # Deeplab V3 Prediction # sample execution (requires torchvision) from PIL import Image from torchvision import transforms input_image = Image.open(filename) print(input_image) preprocess = transforms.Compose([ transforms.ToTensor() ]) input_tensor = preprocess(input_image) input_batch = input_tensor.unsqueeze(0) # create a mini-batch as expected by the model # move the input and model to GPU for speed if available if torch.cuda.is_available(): print(&#39;Using GPU!&#39;) input_batch = input_batch.to(&#39;cuda&#39;) model.to(&#39;cuda&#39;) with torch.no_grad(): output = model(input_batch)[&#39;out&#39;][0] output_predictions = output[0] # plot the semantic segmentation predictions of 21 classes in each color img_size = input_image.size data = output_predictions.cpu().numpy() * 255 print(data) print(data.sum()) r = Image.fromarray(data).resize(img_size) ax3 = plt.subplot(1, 2, 2) ax3 = plt.imshow(r) plt.xlabel(&quot;OUTPUT&quot;, size = 15) plt.show() . &lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=1366x768 at 0x7F9704831310&gt; Using GPU! [[6.118342 6.118342 6.118342 ... 1.5639745 1.5639745 1.5639745] [6.118342 6.118342 6.118342 ... 1.5639745 1.5639745 1.5639745] [6.118342 6.118342 6.118342 ... 1.5639745 1.5639745 1.5639745] ... [3.5671527 3.5671527 3.5671527 ... 3.0905356 3.0905356 3.0905356] [3.5671527 3.5671527 3.5671527 ... 3.0905356 3.0905356 3.0905356] [3.5671527 3.5671527 3.5671527 ... 3.0905356 3.0905356 3.0905356]] 4007741.8 . import cv2 import matplotlib.pyplot as plt filename = &#39;/content/캡처33.JPG&#39; img1 = cv2.imread(filename) img1_rgb = cv2.cvtColor(img1, cv2.COLOR_BGR2RGB) plt.figure(figsize=(25, 25)) ax1 = plt.subplot(1, 2, 1) ax1.imshow(img1_rgb) plt.xlabel(&quot;INPUT&quot;, size = 15) # Deeplab V3 Prediction # sample execution (requires torchvision) from PIL import Image from torchvision import transforms input_image = Image.open(filename) print(input_image) preprocess = transforms.Compose([ transforms.ToTensor() ]) input_tensor = preprocess(input_image) input_batch = input_tensor.unsqueeze(0) # create a mini-batch as expected by the model # move the input and model to GPU for speed if available if torch.cuda.is_available(): print(&#39;Using GPU!&#39;) input_batch = input_batch.to(&#39;cuda&#39;) model.to(&#39;cuda&#39;) with torch.no_grad(): output = model(input_batch)[&#39;out&#39;][0] output_predictions = output[0] # plot the semantic segmentation predictions of 21 classes in each color img_size = input_image.size data = output_predictions.cpu().numpy() * 255 print(data) print(data.sum()) r = Image.fromarray(data).resize(img_size) ax3 = plt.subplot(1, 2, 2) ax3 = plt.imshow(r) plt.xlabel(&quot;OUTPUT&quot;, size = 15) plt.show() . &lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=1366x768 at 0x7F9704A372D0&gt; Using GPU! [[3.808771 3.808771 3.808771 ... 1.001113 1.001113 1.001113 ] [3.808771 3.808771 3.808771 ... 1.001113 1.001113 1.001113 ] [3.808771 3.808771 3.808771 ... 1.001113 1.001113 1.001113 ] ... [1.78548 1.78548 1.78548 ... 1.3692136 1.3692136 1.3692136] [1.78548 1.78548 1.78548 ... 1.3692136 1.3692136 1.3692136] [1.78548 1.78548 1.78548 ... 1.3692136 1.3692136 1.3692136]] 176825.69 .",
            "url": "https://raukrauk.github.io/ML-DL/2021/12/24/Deeplab_V3_prediction.html",
            "relUrl": "/2021/12/24/Deeplab_V3_prediction.html",
            "date": " • Dec 24, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://raukrauk.github.io/ML-DL/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://raukrauk.github.io/ML-DL/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://raukrauk.github.io/ML-DL/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://raukrauk.github.io/ML-DL/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}